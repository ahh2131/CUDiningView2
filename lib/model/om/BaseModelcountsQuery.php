<?php


/**
 * Base class that represents a query for the 'modelcounts' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Mon Oct  7 17:23:16 2013
 *
 * @method ModelcountsQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method ModelcountsQuery orderByCountTime($order = Criteria::ASC) Order by the count_time column
 * @method ModelcountsQuery orderByJay($order = Criteria::ASC) Order by the JAY column
 * @method ModelcountsQuery orderByJjp($order = Criteria::ASC) Order by the JJP column
 * @method ModelcountsQuery orderByFer($order = Criteria::ASC) Order by the FER column
 *
 * @method ModelcountsQuery groupByCreatedAt() Group by the created_at column
 * @method ModelcountsQuery groupByCountTime() Group by the count_time column
 * @method ModelcountsQuery groupByJay() Group by the JAY column
 * @method ModelcountsQuery groupByJjp() Group by the JJP column
 * @method ModelcountsQuery groupByFer() Group by the FER column
 *
 * @method ModelcountsQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method ModelcountsQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method ModelcountsQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method Modelcounts findOne(PropelPDO $con = null) Return the first Modelcounts matching the query
 * @method Modelcounts findOneOrCreate(PropelPDO $con = null) Return the first Modelcounts matching the query, or a new Modelcounts object populated from the query conditions when no match is found
 *
 * @method Modelcounts findOneByCreatedAt(string $created_at) Return the first Modelcounts filtered by the created_at column
 * @method Modelcounts findOneByCountTime(string $count_time) Return the first Modelcounts filtered by the count_time column
 * @method Modelcounts findOneByJay(int $JAY) Return the first Modelcounts filtered by the JAY column
 * @method Modelcounts findOneByJjp(int $JJP) Return the first Modelcounts filtered by the JJP column
 * @method Modelcounts findOneByFer(int $FER) Return the first Modelcounts filtered by the FER column
 *
 * @method array findByCreatedAt(string $created_at) Return Modelcounts objects filtered by the created_at column
 * @method array findByCountTime(string $count_time) Return Modelcounts objects filtered by the count_time column
 * @method array findByJay(int $JAY) Return Modelcounts objects filtered by the JAY column
 * @method array findByJjp(int $JJP) Return Modelcounts objects filtered by the JJP column
 * @method array findByFer(int $FER) Return Modelcounts objects filtered by the FER column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseModelcountsQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseModelcountsQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Modelcounts', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new ModelcountsQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     ModelcountsQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return ModelcountsQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof ModelcountsQuery) {
            return $criteria;
        }
        $query = new ModelcountsQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Modelcounts|Modelcounts[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = ModelcountsPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(ModelcountsPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Modelcounts A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `CREATED_AT`, `COUNT_TIME`, `JAY`, `JJP`, `FER` FROM `modelcounts` WHERE `COUNT_TIME` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_STR);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Modelcounts();
            $obj->hydrate($row);
            ModelcountsPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Modelcounts|Modelcounts[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Modelcounts[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return ModelcountsQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(ModelcountsPeer::COUNT_TIME, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return ModelcountsQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(ModelcountsPeer::COUNT_TIME, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ModelcountsQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(ModelcountsPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(ModelcountsPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ModelcountsPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the count_time column
     *
     * Example usage:
     * <code>
     * $query->filterByCountTime('2011-03-14'); // WHERE count_time = '2011-03-14'
     * $query->filterByCountTime('now'); // WHERE count_time = '2011-03-14'
     * $query->filterByCountTime(array('max' => 'yesterday')); // WHERE count_time > '2011-03-13'
     * </code>
     *
     * @param     mixed $countTime The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ModelcountsQuery The current query, for fluid interface
     */
    public function filterByCountTime($countTime = null, $comparison = null)
    {
        if (is_array($countTime)) {
            $useMinMax = false;
            if (isset($countTime['min'])) {
                $this->addUsingAlias(ModelcountsPeer::COUNT_TIME, $countTime['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($countTime['max'])) {
                $this->addUsingAlias(ModelcountsPeer::COUNT_TIME, $countTime['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ModelcountsPeer::COUNT_TIME, $countTime, $comparison);
    }

    /**
     * Filter the query on the JAY column
     *
     * Example usage:
     * <code>
     * $query->filterByJay(1234); // WHERE JAY = 1234
     * $query->filterByJay(array(12, 34)); // WHERE JAY IN (12, 34)
     * $query->filterByJay(array('min' => 12)); // WHERE JAY > 12
     * </code>
     *
     * @param     mixed $jay The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ModelcountsQuery The current query, for fluid interface
     */
    public function filterByJay($jay = null, $comparison = null)
    {
        if (is_array($jay)) {
            $useMinMax = false;
            if (isset($jay['min'])) {
                $this->addUsingAlias(ModelcountsPeer::JAY, $jay['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($jay['max'])) {
                $this->addUsingAlias(ModelcountsPeer::JAY, $jay['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ModelcountsPeer::JAY, $jay, $comparison);
    }

    /**
     * Filter the query on the JJP column
     *
     * Example usage:
     * <code>
     * $query->filterByJjp(1234); // WHERE JJP = 1234
     * $query->filterByJjp(array(12, 34)); // WHERE JJP IN (12, 34)
     * $query->filterByJjp(array('min' => 12)); // WHERE JJP > 12
     * </code>
     *
     * @param     mixed $jjp The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ModelcountsQuery The current query, for fluid interface
     */
    public function filterByJjp($jjp = null, $comparison = null)
    {
        if (is_array($jjp)) {
            $useMinMax = false;
            if (isset($jjp['min'])) {
                $this->addUsingAlias(ModelcountsPeer::JJP, $jjp['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($jjp['max'])) {
                $this->addUsingAlias(ModelcountsPeer::JJP, $jjp['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ModelcountsPeer::JJP, $jjp, $comparison);
    }

    /**
     * Filter the query on the FER column
     *
     * Example usage:
     * <code>
     * $query->filterByFer(1234); // WHERE FER = 1234
     * $query->filterByFer(array(12, 34)); // WHERE FER IN (12, 34)
     * $query->filterByFer(array('min' => 12)); // WHERE FER > 12
     * </code>
     *
     * @param     mixed $fer The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ModelcountsQuery The current query, for fluid interface
     */
    public function filterByFer($fer = null, $comparison = null)
    {
        if (is_array($fer)) {
            $useMinMax = false;
            if (isset($fer['min'])) {
                $this->addUsingAlias(ModelcountsPeer::FER, $fer['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fer['max'])) {
                $this->addUsingAlias(ModelcountsPeer::FER, $fer['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ModelcountsPeer::FER, $fer, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   Modelcounts $modelcounts Object to remove from the list of results
     *
     * @return ModelcountsQuery The current query, for fluid interface
     */
    public function prune($modelcounts = null)
    {
        if ($modelcounts) {
            $this->addUsingAlias(ModelcountsPeer::COUNT_TIME, $modelcounts->getCountTime(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
