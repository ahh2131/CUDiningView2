<?php


/**
 * Base class that represents a row from the 'nutrition' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Mon Aug  5 18:10:17 2013
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseNutrition extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'NutritionPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        NutritionPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the food_id field.
     * @var        int
     */
    protected $food_id;

    /**
     * The value for the current field.
     * @var        int
     */
    protected $current;

    /**
     * The value for the dish field.
     * @var        string
     */
    protected $dish;

    /**
     * The value for the jay field.
     * @var        int
     */
    protected $jay;

    /**
     * The value for the jjp field.
     * @var        int
     */
    protected $jjp;

    /**
     * The value for the fer field.
     * @var        int
     */
    protected $fer;

    /**
     * The value for the servingsize field.
     * @var        string
     */
    protected $servingsize;

    /**
     * The value for the calories field.
     * @var        int
     */
    protected $calories;

    /**
     * The value for the totalfat field.
     * @var        int
     */
    protected $totalfat;

    /**
     * The value for the cholesterol field.
     * @var        int
     */
    protected $cholesterol;

    /**
     * The value for the saturatedfat field.
     * @var        int
     */
    protected $saturatedfat;

    /**
     * The value for the protein field.
     * @var        int
     */
    protected $protein;

    /**
     * The value for the carbohydrate field.
     * @var        int
     */
    protected $carbohydrate;

    /**
     * The value for the fiber field.
     * @var        int
     */
    protected $fiber;

    /**
     * The value for the sodium field.
     * @var        int
     */
    protected $sodium;

    /**
     * The value for the score field.
     * @var        int
     */
    protected $score;

    /**
     * The value for the url field.
     * @var        string
     */
    protected $url;

    /**
     * The value for the v field.
     * @var        int
     */
    protected $v;

    /**
     * The value for the vn field.
     * @var        int
     */
    protected $vn;

    /**
     * The value for the gf field.
     * @var        int
     */
    protected $gf;

    /**
     * The value for the l field.
     * @var        int
     */
    protected $l;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Get the [food_id] column value.
     *
     * @return int
     */
    public function getFoodId()
    {
        return $this->food_id;
    }

    /**
     * Get the [current] column value.
     *
     * @return int
     */
    public function getCurrent()
    {
        return $this->current;
    }

    /**
     * Get the [dish] column value.
     *
     * @return string
     */
    public function getDish()
    {
        return $this->dish;
    }

    /**
     * Get the [jay] column value.
     *
     * @return int
     */
    public function getJay()
    {
        return $this->jay;
    }

    /**
     * Get the [jjp] column value.
     *
     * @return int
     */
    public function getJjp()
    {
        return $this->jjp;
    }

    /**
     * Get the [fer] column value.
     *
     * @return int
     */
    public function getFer()
    {
        return $this->fer;
    }

    /**
     * Get the [servingsize] column value.
     *
     * @return string
     */
    public function getServingsize()
    {
        return $this->servingsize;
    }

    /**
     * Get the [calories] column value.
     *
     * @return int
     */
    public function getCalories()
    {
        return $this->calories;
    }

    /**
     * Get the [totalfat] column value.
     *
     * @return int
     */
    public function getTotalfat()
    {
        return $this->totalfat;
    }

    /**
     * Get the [cholesterol] column value.
     *
     * @return int
     */
    public function getCholesterol()
    {
        return $this->cholesterol;
    }

    /**
     * Get the [saturatedfat] column value.
     *
     * @return int
     */
    public function getSaturatedfat()
    {
        return $this->saturatedfat;
    }

    /**
     * Get the [protein] column value.
     *
     * @return int
     */
    public function getProtein()
    {
        return $this->protein;
    }

    /**
     * Get the [carbohydrate] column value.
     *
     * @return int
     */
    public function getCarbohydrate()
    {
        return $this->carbohydrate;
    }

    /**
     * Get the [fiber] column value.
     *
     * @return int
     */
    public function getFiber()
    {
        return $this->fiber;
    }

    /**
     * Get the [sodium] column value.
     *
     * @return int
     */
    public function getSodium()
    {
        return $this->sodium;
    }

    /**
     * Get the [score] column value.
     *
     * @return int
     */
    public function getScore()
    {
        return $this->score;
    }

    /**
     * Get the [url] column value.
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Get the [v] column value.
     *
     * @return int
     */
    public function getV()
    {
        return $this->v;
    }

    /**
     * Get the [vn] column value.
     *
     * @return int
     */
    public function getVn()
    {
        return $this->vn;
    }

    /**
     * Get the [gf] column value.
     *
     * @return int
     */
    public function getGf()
    {
        return $this->gf;
    }

    /**
     * Get the [l] column value.
     *
     * @return int
     */
    public function getL()
    {
        return $this->l;
    }

    /**
     * Set the value of [food_id] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setFoodId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->food_id !== $v) {
            $this->food_id = $v;
            $this->modifiedColumns[] = NutritionPeer::FOOD_ID;
        }


        return $this;
    } // setFoodId()

    /**
     * Set the value of [current] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setCurrent($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->current !== $v) {
            $this->current = $v;
            $this->modifiedColumns[] = NutritionPeer::CURRENT;
        }


        return $this;
    } // setCurrent()

    /**
     * Set the value of [dish] column.
     *
     * @param string $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setDish($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->dish !== $v) {
            $this->dish = $v;
            $this->modifiedColumns[] = NutritionPeer::DISH;
        }


        return $this;
    } // setDish()

    /**
     * Set the value of [jay] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setJay($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->jay !== $v) {
            $this->jay = $v;
            $this->modifiedColumns[] = NutritionPeer::JAY;
        }


        return $this;
    } // setJay()

    /**
     * Set the value of [jjp] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setJjp($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->jjp !== $v) {
            $this->jjp = $v;
            $this->modifiedColumns[] = NutritionPeer::JJP;
        }


        return $this;
    } // setJjp()

    /**
     * Set the value of [fer] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setFer($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->fer !== $v) {
            $this->fer = $v;
            $this->modifiedColumns[] = NutritionPeer::FER;
        }


        return $this;
    } // setFer()

    /**
     * Set the value of [servingsize] column.
     *
     * @param string $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setServingsize($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->servingsize !== $v) {
            $this->servingsize = $v;
            $this->modifiedColumns[] = NutritionPeer::SERVINGSIZE;
        }


        return $this;
    } // setServingsize()

    /**
     * Set the value of [calories] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setCalories($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->calories !== $v) {
            $this->calories = $v;
            $this->modifiedColumns[] = NutritionPeer::CALORIES;
        }


        return $this;
    } // setCalories()

    /**
     * Set the value of [totalfat] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setTotalfat($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->totalfat !== $v) {
            $this->totalfat = $v;
            $this->modifiedColumns[] = NutritionPeer::TOTALFAT;
        }


        return $this;
    } // setTotalfat()

    /**
     * Set the value of [cholesterol] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setCholesterol($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->cholesterol !== $v) {
            $this->cholesterol = $v;
            $this->modifiedColumns[] = NutritionPeer::CHOLESTEROL;
        }


        return $this;
    } // setCholesterol()

    /**
     * Set the value of [saturatedfat] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setSaturatedfat($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->saturatedfat !== $v) {
            $this->saturatedfat = $v;
            $this->modifiedColumns[] = NutritionPeer::SATURATEDFAT;
        }


        return $this;
    } // setSaturatedfat()

    /**
     * Set the value of [protein] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setProtein($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->protein !== $v) {
            $this->protein = $v;
            $this->modifiedColumns[] = NutritionPeer::PROTEIN;
        }


        return $this;
    } // setProtein()

    /**
     * Set the value of [carbohydrate] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setCarbohydrate($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->carbohydrate !== $v) {
            $this->carbohydrate = $v;
            $this->modifiedColumns[] = NutritionPeer::CARBOHYDRATE;
        }


        return $this;
    } // setCarbohydrate()

    /**
     * Set the value of [fiber] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setFiber($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->fiber !== $v) {
            $this->fiber = $v;
            $this->modifiedColumns[] = NutritionPeer::FIBER;
        }


        return $this;
    } // setFiber()

    /**
     * Set the value of [sodium] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setSodium($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->sodium !== $v) {
            $this->sodium = $v;
            $this->modifiedColumns[] = NutritionPeer::SODIUM;
        }


        return $this;
    } // setSodium()

    /**
     * Set the value of [score] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setScore($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->score !== $v) {
            $this->score = $v;
            $this->modifiedColumns[] = NutritionPeer::SCORE;
        }


        return $this;
    } // setScore()

    /**
     * Set the value of [url] column.
     *
     * @param string $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setUrl($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->url !== $v) {
            $this->url = $v;
            $this->modifiedColumns[] = NutritionPeer::URL;
        }


        return $this;
    } // setUrl()

    /**
     * Set the value of [v] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setV($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->v !== $v) {
            $this->v = $v;
            $this->modifiedColumns[] = NutritionPeer::V;
        }


        return $this;
    } // setV()

    /**
     * Set the value of [vn] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setVn($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->vn !== $v) {
            $this->vn = $v;
            $this->modifiedColumns[] = NutritionPeer::VN;
        }


        return $this;
    } // setVn()

    /**
     * Set the value of [gf] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setGf($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->gf !== $v) {
            $this->gf = $v;
            $this->modifiedColumns[] = NutritionPeer::GF;
        }


        return $this;
    } // setGf()

    /**
     * Set the value of [l] column.
     *
     * @param int $v new value
     * @return Nutrition The current object (for fluent API support)
     */
    public function setL($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->l !== $v) {
            $this->l = $v;
            $this->modifiedColumns[] = NutritionPeer::L;
        }


        return $this;
    } // setL()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->food_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->current = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
            $this->dish = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->jay = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
            $this->jjp = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
            $this->fer = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
            $this->servingsize = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->calories = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
            $this->totalfat = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
            $this->cholesterol = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
            $this->saturatedfat = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
            $this->protein = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
            $this->carbohydrate = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
            $this->fiber = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
            $this->sodium = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
            $this->score = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
            $this->url = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
            $this->v = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
            $this->vn = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
            $this->gf = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
            $this->l = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 21; // 21 = NutritionPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Nutrition object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(NutritionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = NutritionPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(NutritionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = NutritionQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseNutrition:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseNutrition:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(NutritionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseNutrition:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseNutrition:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                NutritionPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;


         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(NutritionPeer::FOOD_ID)) {
            $modifiedColumns[':p' . $index++]  = '`FOOD_ID`';
        }
        if ($this->isColumnModified(NutritionPeer::CURRENT)) {
            $modifiedColumns[':p' . $index++]  = '`CURRENT`';
        }
        if ($this->isColumnModified(NutritionPeer::DISH)) {
            $modifiedColumns[':p' . $index++]  = '`DISH`';
        }
        if ($this->isColumnModified(NutritionPeer::JAY)) {
            $modifiedColumns[':p' . $index++]  = '`JAY`';
        }
        if ($this->isColumnModified(NutritionPeer::JJP)) {
            $modifiedColumns[':p' . $index++]  = '`JJP`';
        }
        if ($this->isColumnModified(NutritionPeer::FER)) {
            $modifiedColumns[':p' . $index++]  = '`FER`';
        }
        if ($this->isColumnModified(NutritionPeer::SERVINGSIZE)) {
            $modifiedColumns[':p' . $index++]  = '`SERVINGSIZE`';
        }
        if ($this->isColumnModified(NutritionPeer::CALORIES)) {
            $modifiedColumns[':p' . $index++]  = '`CALORIES`';
        }
        if ($this->isColumnModified(NutritionPeer::TOTALFAT)) {
            $modifiedColumns[':p' . $index++]  = '`TOTALFAT`';
        }
        if ($this->isColumnModified(NutritionPeer::CHOLESTEROL)) {
            $modifiedColumns[':p' . $index++]  = '`CHOLESTEROL`';
        }
        if ($this->isColumnModified(NutritionPeer::SATURATEDFAT)) {
            $modifiedColumns[':p' . $index++]  = '`SATURATEDFAT`';
        }
        if ($this->isColumnModified(NutritionPeer::PROTEIN)) {
            $modifiedColumns[':p' . $index++]  = '`PROTEIN`';
        }
        if ($this->isColumnModified(NutritionPeer::CARBOHYDRATE)) {
            $modifiedColumns[':p' . $index++]  = '`CARBOHYDRATE`';
        }
        if ($this->isColumnModified(NutritionPeer::FIBER)) {
            $modifiedColumns[':p' . $index++]  = '`FIBER`';
        }
        if ($this->isColumnModified(NutritionPeer::SODIUM)) {
            $modifiedColumns[':p' . $index++]  = '`SODIUM`';
        }
        if ($this->isColumnModified(NutritionPeer::SCORE)) {
            $modifiedColumns[':p' . $index++]  = '`SCORE`';
        }
        if ($this->isColumnModified(NutritionPeer::URL)) {
            $modifiedColumns[':p' . $index++]  = '`URL`';
        }
        if ($this->isColumnModified(NutritionPeer::V)) {
            $modifiedColumns[':p' . $index++]  = '`V`';
        }
        if ($this->isColumnModified(NutritionPeer::VN)) {
            $modifiedColumns[':p' . $index++]  = '`VN`';
        }
        if ($this->isColumnModified(NutritionPeer::GF)) {
            $modifiedColumns[':p' . $index++]  = '`GF`';
        }
        if ($this->isColumnModified(NutritionPeer::L)) {
            $modifiedColumns[':p' . $index++]  = '`L`';
        }

        $sql = sprintf(
            'INSERT INTO `nutrition` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`FOOD_ID`':
                        $stmt->bindValue($identifier, $this->food_id, PDO::PARAM_INT);
                        break;
                    case '`CURRENT`':
                        $stmt->bindValue($identifier, $this->current, PDO::PARAM_INT);
                        break;
                    case '`DISH`':
                        $stmt->bindValue($identifier, $this->dish, PDO::PARAM_STR);
                        break;
                    case '`JAY`':
                        $stmt->bindValue($identifier, $this->jay, PDO::PARAM_INT);
                        break;
                    case '`JJP`':
                        $stmt->bindValue($identifier, $this->jjp, PDO::PARAM_INT);
                        break;
                    case '`FER`':
                        $stmt->bindValue($identifier, $this->fer, PDO::PARAM_INT);
                        break;
                    case '`SERVINGSIZE`':
                        $stmt->bindValue($identifier, $this->servingsize, PDO::PARAM_STR);
                        break;
                    case '`CALORIES`':
                        $stmt->bindValue($identifier, $this->calories, PDO::PARAM_INT);
                        break;
                    case '`TOTALFAT`':
                        $stmt->bindValue($identifier, $this->totalfat, PDO::PARAM_INT);
                        break;
                    case '`CHOLESTEROL`':
                        $stmt->bindValue($identifier, $this->cholesterol, PDO::PARAM_INT);
                        break;
                    case '`SATURATEDFAT`':
                        $stmt->bindValue($identifier, $this->saturatedfat, PDO::PARAM_INT);
                        break;
                    case '`PROTEIN`':
                        $stmt->bindValue($identifier, $this->protein, PDO::PARAM_INT);
                        break;
                    case '`CARBOHYDRATE`':
                        $stmt->bindValue($identifier, $this->carbohydrate, PDO::PARAM_INT);
                        break;
                    case '`FIBER`':
                        $stmt->bindValue($identifier, $this->fiber, PDO::PARAM_INT);
                        break;
                    case '`SODIUM`':
                        $stmt->bindValue($identifier, $this->sodium, PDO::PARAM_INT);
                        break;
                    case '`SCORE`':
                        $stmt->bindValue($identifier, $this->score, PDO::PARAM_INT);
                        break;
                    case '`URL`':
                        $stmt->bindValue($identifier, $this->url, PDO::PARAM_STR);
                        break;
                    case '`V`':
                        $stmt->bindValue($identifier, $this->v, PDO::PARAM_INT);
                        break;
                    case '`VN`':
                        $stmt->bindValue($identifier, $this->vn, PDO::PARAM_INT);
                        break;
                    case '`GF`':
                        $stmt->bindValue($identifier, $this->gf, PDO::PARAM_INT);
                        break;
                    case '`L`':
                        $stmt->bindValue($identifier, $this->l, PDO::PARAM_INT);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            if (($retval = NutritionPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }



            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = NutritionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getFoodId();
                break;
            case 1:
                return $this->getCurrent();
                break;
            case 2:
                return $this->getDish();
                break;
            case 3:
                return $this->getJay();
                break;
            case 4:
                return $this->getJjp();
                break;
            case 5:
                return $this->getFer();
                break;
            case 6:
                return $this->getServingsize();
                break;
            case 7:
                return $this->getCalories();
                break;
            case 8:
                return $this->getTotalfat();
                break;
            case 9:
                return $this->getCholesterol();
                break;
            case 10:
                return $this->getSaturatedfat();
                break;
            case 11:
                return $this->getProtein();
                break;
            case 12:
                return $this->getCarbohydrate();
                break;
            case 13:
                return $this->getFiber();
                break;
            case 14:
                return $this->getSodium();
                break;
            case 15:
                return $this->getScore();
                break;
            case 16:
                return $this->getUrl();
                break;
            case 17:
                return $this->getV();
                break;
            case 18:
                return $this->getVn();
                break;
            case 19:
                return $this->getGf();
                break;
            case 20:
                return $this->getL();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array())
    {
        if (isset($alreadyDumpedObjects['Nutrition'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Nutrition'][$this->getPrimaryKey()] = true;
        $keys = NutritionPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getFoodId(),
            $keys[1] => $this->getCurrent(),
            $keys[2] => $this->getDish(),
            $keys[3] => $this->getJay(),
            $keys[4] => $this->getJjp(),
            $keys[5] => $this->getFer(),
            $keys[6] => $this->getServingsize(),
            $keys[7] => $this->getCalories(),
            $keys[8] => $this->getTotalfat(),
            $keys[9] => $this->getCholesterol(),
            $keys[10] => $this->getSaturatedfat(),
            $keys[11] => $this->getProtein(),
            $keys[12] => $this->getCarbohydrate(),
            $keys[13] => $this->getFiber(),
            $keys[14] => $this->getSodium(),
            $keys[15] => $this->getScore(),
            $keys[16] => $this->getUrl(),
            $keys[17] => $this->getV(),
            $keys[18] => $this->getVn(),
            $keys[19] => $this->getGf(),
            $keys[20] => $this->getL(),
        );

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = NutritionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setFoodId($value);
                break;
            case 1:
                $this->setCurrent($value);
                break;
            case 2:
                $this->setDish($value);
                break;
            case 3:
                $this->setJay($value);
                break;
            case 4:
                $this->setJjp($value);
                break;
            case 5:
                $this->setFer($value);
                break;
            case 6:
                $this->setServingsize($value);
                break;
            case 7:
                $this->setCalories($value);
                break;
            case 8:
                $this->setTotalfat($value);
                break;
            case 9:
                $this->setCholesterol($value);
                break;
            case 10:
                $this->setSaturatedfat($value);
                break;
            case 11:
                $this->setProtein($value);
                break;
            case 12:
                $this->setCarbohydrate($value);
                break;
            case 13:
                $this->setFiber($value);
                break;
            case 14:
                $this->setSodium($value);
                break;
            case 15:
                $this->setScore($value);
                break;
            case 16:
                $this->setUrl($value);
                break;
            case 17:
                $this->setV($value);
                break;
            case 18:
                $this->setVn($value);
                break;
            case 19:
                $this->setGf($value);
                break;
            case 20:
                $this->setL($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = NutritionPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setFoodId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setCurrent($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setDish($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setJay($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setJjp($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setFer($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setServingsize($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setCalories($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setTotalfat($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setCholesterol($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setSaturatedfat($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setProtein($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setCarbohydrate($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setFiber($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setSodium($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setScore($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setUrl($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setV($arr[$keys[17]]);
        if (array_key_exists($keys[18], $arr)) $this->setVn($arr[$keys[18]]);
        if (array_key_exists($keys[19], $arr)) $this->setGf($arr[$keys[19]]);
        if (array_key_exists($keys[20], $arr)) $this->setL($arr[$keys[20]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(NutritionPeer::DATABASE_NAME);

        if ($this->isColumnModified(NutritionPeer::FOOD_ID)) $criteria->add(NutritionPeer::FOOD_ID, $this->food_id);
        if ($this->isColumnModified(NutritionPeer::CURRENT)) $criteria->add(NutritionPeer::CURRENT, $this->current);
        if ($this->isColumnModified(NutritionPeer::DISH)) $criteria->add(NutritionPeer::DISH, $this->dish);
        if ($this->isColumnModified(NutritionPeer::JAY)) $criteria->add(NutritionPeer::JAY, $this->jay);
        if ($this->isColumnModified(NutritionPeer::JJP)) $criteria->add(NutritionPeer::JJP, $this->jjp);
        if ($this->isColumnModified(NutritionPeer::FER)) $criteria->add(NutritionPeer::FER, $this->fer);
        if ($this->isColumnModified(NutritionPeer::SERVINGSIZE)) $criteria->add(NutritionPeer::SERVINGSIZE, $this->servingsize);
        if ($this->isColumnModified(NutritionPeer::CALORIES)) $criteria->add(NutritionPeer::CALORIES, $this->calories);
        if ($this->isColumnModified(NutritionPeer::TOTALFAT)) $criteria->add(NutritionPeer::TOTALFAT, $this->totalfat);
        if ($this->isColumnModified(NutritionPeer::CHOLESTEROL)) $criteria->add(NutritionPeer::CHOLESTEROL, $this->cholesterol);
        if ($this->isColumnModified(NutritionPeer::SATURATEDFAT)) $criteria->add(NutritionPeer::SATURATEDFAT, $this->saturatedfat);
        if ($this->isColumnModified(NutritionPeer::PROTEIN)) $criteria->add(NutritionPeer::PROTEIN, $this->protein);
        if ($this->isColumnModified(NutritionPeer::CARBOHYDRATE)) $criteria->add(NutritionPeer::CARBOHYDRATE, $this->carbohydrate);
        if ($this->isColumnModified(NutritionPeer::FIBER)) $criteria->add(NutritionPeer::FIBER, $this->fiber);
        if ($this->isColumnModified(NutritionPeer::SODIUM)) $criteria->add(NutritionPeer::SODIUM, $this->sodium);
        if ($this->isColumnModified(NutritionPeer::SCORE)) $criteria->add(NutritionPeer::SCORE, $this->score);
        if ($this->isColumnModified(NutritionPeer::URL)) $criteria->add(NutritionPeer::URL, $this->url);
        if ($this->isColumnModified(NutritionPeer::V)) $criteria->add(NutritionPeer::V, $this->v);
        if ($this->isColumnModified(NutritionPeer::VN)) $criteria->add(NutritionPeer::VN, $this->vn);
        if ($this->isColumnModified(NutritionPeer::GF)) $criteria->add(NutritionPeer::GF, $this->gf);
        if ($this->isColumnModified(NutritionPeer::L)) $criteria->add(NutritionPeer::L, $this->l);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(NutritionPeer::DATABASE_NAME);
        $criteria->add(NutritionPeer::FOOD_ID, $this->food_id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getFoodId();
    }

    /**
     * Generic method to set the primary key (food_id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setFoodId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getFoodId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Nutrition (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setCurrent($this->getCurrent());
        $copyObj->setDish($this->getDish());
        $copyObj->setJay($this->getJay());
        $copyObj->setJjp($this->getJjp());
        $copyObj->setFer($this->getFer());
        $copyObj->setServingsize($this->getServingsize());
        $copyObj->setCalories($this->getCalories());
        $copyObj->setTotalfat($this->getTotalfat());
        $copyObj->setCholesterol($this->getCholesterol());
        $copyObj->setSaturatedfat($this->getSaturatedfat());
        $copyObj->setProtein($this->getProtein());
        $copyObj->setCarbohydrate($this->getCarbohydrate());
        $copyObj->setFiber($this->getFiber());
        $copyObj->setSodium($this->getSodium());
        $copyObj->setScore($this->getScore());
        $copyObj->setUrl($this->getUrl());
        $copyObj->setV($this->getV());
        $copyObj->setVn($this->getVn());
        $copyObj->setGf($this->getGf());
        $copyObj->setL($this->getL());
        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setFoodId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Nutrition Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return NutritionPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new NutritionPeer();
        }

        return self::$peer;
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->food_id = null;
        $this->current = null;
        $this->dish = null;
        $this->jay = null;
        $this->jjp = null;
        $this->fer = null;
        $this->servingsize = null;
        $this->calories = null;
        $this->totalfat = null;
        $this->cholesterol = null;
        $this->saturatedfat = null;
        $this->protein = null;
        $this->carbohydrate = null;
        $this->fiber = null;
        $this->sodium = null;
        $this->score = null;
        $this->url = null;
        $this->v = null;
        $this->vn = null;
        $this->gf = null;
        $this->l = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
        } // if ($deep)

    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(NutritionPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseNutrition:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
