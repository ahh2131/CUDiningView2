<?php


/**
 * Base class that represents a query for the 'nutrition' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Mon Aug  5 20:28:24 2013
 *
 * @method NutritionQuery orderByFoodId($order = Criteria::ASC) Order by the FOOD_ID column
 * @method NutritionQuery orderByCurrent($order = Criteria::ASC) Order by the CURRENT column
 * @method NutritionQuery orderByDish($order = Criteria::ASC) Order by the Dish column
 * @method NutritionQuery orderByJay($order = Criteria::ASC) Order by the JAY column
 * @method NutritionQuery orderByJjp($order = Criteria::ASC) Order by the JJP column
 * @method NutritionQuery orderByFer($order = Criteria::ASC) Order by the FER column
 * @method NutritionQuery orderByServingsize($order = Criteria::ASC) Order by the ServingSize column
 * @method NutritionQuery orderByCalories($order = Criteria::ASC) Order by the Calories column
 * @method NutritionQuery orderByTotalfat($order = Criteria::ASC) Order by the TotalFat column
 * @method NutritionQuery orderByCholesterol($order = Criteria::ASC) Order by the Cholesterol column
 * @method NutritionQuery orderBySaturatedfat($order = Criteria::ASC) Order by the SaturatedFat column
 * @method NutritionQuery orderByProtein($order = Criteria::ASC) Order by the Protein column
 * @method NutritionQuery orderByCarbohydrate($order = Criteria::ASC) Order by the Carbohydrate column
 * @method NutritionQuery orderByFiber($order = Criteria::ASC) Order by the Fiber column
 * @method NutritionQuery orderBySodium($order = Criteria::ASC) Order by the Sodium column
 * @method NutritionQuery orderByScore($order = Criteria::ASC) Order by the Score column
 * @method NutritionQuery orderByUrl($order = Criteria::ASC) Order by the Url column
 * @method NutritionQuery orderByV($order = Criteria::ASC) Order by the V column
 * @method NutritionQuery orderByVn($order = Criteria::ASC) Order by the VN column
 * @method NutritionQuery orderByGf($order = Criteria::ASC) Order by the GF column
 * @method NutritionQuery orderByL($order = Criteria::ASC) Order by the L column
 *
 * @method NutritionQuery groupByFoodId() Group by the FOOD_ID column
 * @method NutritionQuery groupByCurrent() Group by the CURRENT column
 * @method NutritionQuery groupByDish() Group by the Dish column
 * @method NutritionQuery groupByJay() Group by the JAY column
 * @method NutritionQuery groupByJjp() Group by the JJP column
 * @method NutritionQuery groupByFer() Group by the FER column
 * @method NutritionQuery groupByServingsize() Group by the ServingSize column
 * @method NutritionQuery groupByCalories() Group by the Calories column
 * @method NutritionQuery groupByTotalfat() Group by the TotalFat column
 * @method NutritionQuery groupByCholesterol() Group by the Cholesterol column
 * @method NutritionQuery groupBySaturatedfat() Group by the SaturatedFat column
 * @method NutritionQuery groupByProtein() Group by the Protein column
 * @method NutritionQuery groupByCarbohydrate() Group by the Carbohydrate column
 * @method NutritionQuery groupByFiber() Group by the Fiber column
 * @method NutritionQuery groupBySodium() Group by the Sodium column
 * @method NutritionQuery groupByScore() Group by the Score column
 * @method NutritionQuery groupByUrl() Group by the Url column
 * @method NutritionQuery groupByV() Group by the V column
 * @method NutritionQuery groupByVn() Group by the VN column
 * @method NutritionQuery groupByGf() Group by the GF column
 * @method NutritionQuery groupByL() Group by the L column
 *
 * @method NutritionQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method NutritionQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method NutritionQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method Nutrition findOne(PropelPDO $con = null) Return the first Nutrition matching the query
 * @method Nutrition findOneOrCreate(PropelPDO $con = null) Return the first Nutrition matching the query, or a new Nutrition object populated from the query conditions when no match is found
 *
 * @method Nutrition findOneByFoodId(int $FOOD_ID) Return the first Nutrition filtered by the FOOD_ID column
 * @method Nutrition findOneByCurrent(int $CURRENT) Return the first Nutrition filtered by the CURRENT column
 * @method Nutrition findOneByDish(string $Dish) Return the first Nutrition filtered by the Dish column
 * @method Nutrition findOneByJay(int $JAY) Return the first Nutrition filtered by the JAY column
 * @method Nutrition findOneByJjp(int $JJP) Return the first Nutrition filtered by the JJP column
 * @method Nutrition findOneByFer(int $FER) Return the first Nutrition filtered by the FER column
 * @method Nutrition findOneByServingsize(string $ServingSize) Return the first Nutrition filtered by the ServingSize column
 * @method Nutrition findOneByCalories(int $Calories) Return the first Nutrition filtered by the Calories column
 * @method Nutrition findOneByTotalfat(int $TotalFat) Return the first Nutrition filtered by the TotalFat column
 * @method Nutrition findOneByCholesterol(int $Cholesterol) Return the first Nutrition filtered by the Cholesterol column
 * @method Nutrition findOneBySaturatedfat(int $SaturatedFat) Return the first Nutrition filtered by the SaturatedFat column
 * @method Nutrition findOneByProtein(int $Protein) Return the first Nutrition filtered by the Protein column
 * @method Nutrition findOneByCarbohydrate(int $Carbohydrate) Return the first Nutrition filtered by the Carbohydrate column
 * @method Nutrition findOneByFiber(int $Fiber) Return the first Nutrition filtered by the Fiber column
 * @method Nutrition findOneBySodium(int $Sodium) Return the first Nutrition filtered by the Sodium column
 * @method Nutrition findOneByScore(int $Score) Return the first Nutrition filtered by the Score column
 * @method Nutrition findOneByUrl(string $Url) Return the first Nutrition filtered by the Url column
 * @method Nutrition findOneByV(int $V) Return the first Nutrition filtered by the V column
 * @method Nutrition findOneByVn(int $VN) Return the first Nutrition filtered by the VN column
 * @method Nutrition findOneByGf(int $GF) Return the first Nutrition filtered by the GF column
 * @method Nutrition findOneByL(int $L) Return the first Nutrition filtered by the L column
 *
 * @method array findByFoodId(int $FOOD_ID) Return Nutrition objects filtered by the FOOD_ID column
 * @method array findByCurrent(int $CURRENT) Return Nutrition objects filtered by the CURRENT column
 * @method array findByDish(string $Dish) Return Nutrition objects filtered by the Dish column
 * @method array findByJay(int $JAY) Return Nutrition objects filtered by the JAY column
 * @method array findByJjp(int $JJP) Return Nutrition objects filtered by the JJP column
 * @method array findByFer(int $FER) Return Nutrition objects filtered by the FER column
 * @method array findByServingsize(string $ServingSize) Return Nutrition objects filtered by the ServingSize column
 * @method array findByCalories(int $Calories) Return Nutrition objects filtered by the Calories column
 * @method array findByTotalfat(int $TotalFat) Return Nutrition objects filtered by the TotalFat column
 * @method array findByCholesterol(int $Cholesterol) Return Nutrition objects filtered by the Cholesterol column
 * @method array findBySaturatedfat(int $SaturatedFat) Return Nutrition objects filtered by the SaturatedFat column
 * @method array findByProtein(int $Protein) Return Nutrition objects filtered by the Protein column
 * @method array findByCarbohydrate(int $Carbohydrate) Return Nutrition objects filtered by the Carbohydrate column
 * @method array findByFiber(int $Fiber) Return Nutrition objects filtered by the Fiber column
 * @method array findBySodium(int $Sodium) Return Nutrition objects filtered by the Sodium column
 * @method array findByScore(int $Score) Return Nutrition objects filtered by the Score column
 * @method array findByUrl(string $Url) Return Nutrition objects filtered by the Url column
 * @method array findByV(int $V) Return Nutrition objects filtered by the V column
 * @method array findByVn(int $VN) Return Nutrition objects filtered by the VN column
 * @method array findByGf(int $GF) Return Nutrition objects filtered by the GF column
 * @method array findByL(int $L) Return Nutrition objects filtered by the L column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseNutritionQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseNutritionQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Nutrition', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new NutritionQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     NutritionQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return NutritionQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof NutritionQuery) {
            return $criteria;
        }
        $query = new NutritionQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Nutrition|Nutrition[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = NutritionPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(NutritionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Nutrition A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `FOOD_ID`, `CURRENT`, `DISH`, `JAY`, `JJP`, `FER`, `SERVINGSIZE`, `CALORIES`, `TOTALFAT`, `CHOLESTEROL`, `SATURATEDFAT`, `PROTEIN`, `CARBOHYDRATE`, `FIBER`, `SODIUM`, `SCORE`, `URL`, `V`, `VN`, `GF`, `L` FROM `nutrition` WHERE `FOOD_ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Nutrition();
            $obj->hydrate($row);
            NutritionPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Nutrition|Nutrition[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Nutrition[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(NutritionPeer::FOOD_ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(NutritionPeer::FOOD_ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the FOOD_ID column
     *
     * Example usage:
     * <code>
     * $query->filterByFoodId(1234); // WHERE FOOD_ID = 1234
     * $query->filterByFoodId(array(12, 34)); // WHERE FOOD_ID IN (12, 34)
     * $query->filterByFoodId(array('min' => 12)); // WHERE FOOD_ID > 12
     * </code>
     *
     * @param     mixed $foodId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByFoodId($foodId = null, $comparison = null)
    {
        if (is_array($foodId)) {
            $useMinMax = false;
            if (isset($foodId['min'])) {
                $this->addUsingAlias(NutritionPeer::FOOD_ID, $foodId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($foodId['max'])) {
                $this->addUsingAlias(NutritionPeer::FOOD_ID, $foodId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::FOOD_ID, $foodId, $comparison);
    }

    /**
     * Filter the query on the CURRENT column
     *
     * Example usage:
     * <code>
     * $query->filterByCurrent(1234); // WHERE CURRENT = 1234
     * $query->filterByCurrent(array(12, 34)); // WHERE CURRENT IN (12, 34)
     * $query->filterByCurrent(array('min' => 12)); // WHERE CURRENT > 12
     * </code>
     *
     * @param     mixed $current The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByCurrent($current = null, $comparison = null)
    {
        if (is_array($current)) {
            $useMinMax = false;
            if (isset($current['min'])) {
                $this->addUsingAlias(NutritionPeer::CURRENT, $current['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($current['max'])) {
                $this->addUsingAlias(NutritionPeer::CURRENT, $current['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::CURRENT, $current, $comparison);
    }

    /**
     * Filter the query on the Dish column
     *
     * Example usage:
     * <code>
     * $query->filterByDish('fooValue');   // WHERE Dish = 'fooValue'
     * $query->filterByDish('%fooValue%'); // WHERE Dish LIKE '%fooValue%'
     * </code>
     *
     * @param     string $dish The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByDish($dish = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($dish)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $dish)) {
                $dish = str_replace('*', '%', $dish);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(NutritionPeer::DISH, $dish, $comparison);
    }

    /**
     * Filter the query on the JAY column
     *
     * Example usage:
     * <code>
     * $query->filterByJay(1234); // WHERE JAY = 1234
     * $query->filterByJay(array(12, 34)); // WHERE JAY IN (12, 34)
     * $query->filterByJay(array('min' => 12)); // WHERE JAY > 12
     * </code>
     *
     * @param     mixed $jay The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByJay($jay = null, $comparison = null)
    {
        if (is_array($jay)) {
            $useMinMax = false;
            if (isset($jay['min'])) {
                $this->addUsingAlias(NutritionPeer::JAY, $jay['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($jay['max'])) {
                $this->addUsingAlias(NutritionPeer::JAY, $jay['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::JAY, $jay, $comparison);
    }

    /**
     * Filter the query on the JJP column
     *
     * Example usage:
     * <code>
     * $query->filterByJjp(1234); // WHERE JJP = 1234
     * $query->filterByJjp(array(12, 34)); // WHERE JJP IN (12, 34)
     * $query->filterByJjp(array('min' => 12)); // WHERE JJP > 12
     * </code>
     *
     * @param     mixed $jjp The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByJjp($jjp = null, $comparison = null)
    {
        if (is_array($jjp)) {
            $useMinMax = false;
            if (isset($jjp['min'])) {
                $this->addUsingAlias(NutritionPeer::JJP, $jjp['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($jjp['max'])) {
                $this->addUsingAlias(NutritionPeer::JJP, $jjp['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::JJP, $jjp, $comparison);
    }

    /**
     * Filter the query on the FER column
     *
     * Example usage:
     * <code>
     * $query->filterByFer(1234); // WHERE FER = 1234
     * $query->filterByFer(array(12, 34)); // WHERE FER IN (12, 34)
     * $query->filterByFer(array('min' => 12)); // WHERE FER > 12
     * </code>
     *
     * @param     mixed $fer The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByFer($fer = null, $comparison = null)
    {
        if (is_array($fer)) {
            $useMinMax = false;
            if (isset($fer['min'])) {
                $this->addUsingAlias(NutritionPeer::FER, $fer['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fer['max'])) {
                $this->addUsingAlias(NutritionPeer::FER, $fer['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::FER, $fer, $comparison);
    }

    /**
     * Filter the query on the ServingSize column
     *
     * Example usage:
     * <code>
     * $query->filterByServingsize('fooValue');   // WHERE ServingSize = 'fooValue'
     * $query->filterByServingsize('%fooValue%'); // WHERE ServingSize LIKE '%fooValue%'
     * </code>
     *
     * @param     string $servingsize The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByServingsize($servingsize = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($servingsize)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $servingsize)) {
                $servingsize = str_replace('*', '%', $servingsize);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(NutritionPeer::SERVINGSIZE, $servingsize, $comparison);
    }

    /**
     * Filter the query on the Calories column
     *
     * Example usage:
     * <code>
     * $query->filterByCalories(1234); // WHERE Calories = 1234
     * $query->filterByCalories(array(12, 34)); // WHERE Calories IN (12, 34)
     * $query->filterByCalories(array('min' => 12)); // WHERE Calories > 12
     * </code>
     *
     * @param     mixed $calories The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByCalories($calories = null, $comparison = null)
    {
        if (is_array($calories)) {
            $useMinMax = false;
            if (isset($calories['min'])) {
                $this->addUsingAlias(NutritionPeer::CALORIES, $calories['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($calories['max'])) {
                $this->addUsingAlias(NutritionPeer::CALORIES, $calories['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::CALORIES, $calories, $comparison);
    }

    /**
     * Filter the query on the TotalFat column
     *
     * Example usage:
     * <code>
     * $query->filterByTotalfat(1234); // WHERE TotalFat = 1234
     * $query->filterByTotalfat(array(12, 34)); // WHERE TotalFat IN (12, 34)
     * $query->filterByTotalfat(array('min' => 12)); // WHERE TotalFat > 12
     * </code>
     *
     * @param     mixed $totalfat The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByTotalfat($totalfat = null, $comparison = null)
    {
        if (is_array($totalfat)) {
            $useMinMax = false;
            if (isset($totalfat['min'])) {
                $this->addUsingAlias(NutritionPeer::TOTALFAT, $totalfat['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($totalfat['max'])) {
                $this->addUsingAlias(NutritionPeer::TOTALFAT, $totalfat['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::TOTALFAT, $totalfat, $comparison);
    }

    /**
     * Filter the query on the Cholesterol column
     *
     * Example usage:
     * <code>
     * $query->filterByCholesterol(1234); // WHERE Cholesterol = 1234
     * $query->filterByCholesterol(array(12, 34)); // WHERE Cholesterol IN (12, 34)
     * $query->filterByCholesterol(array('min' => 12)); // WHERE Cholesterol > 12
     * </code>
     *
     * @param     mixed $cholesterol The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByCholesterol($cholesterol = null, $comparison = null)
    {
        if (is_array($cholesterol)) {
            $useMinMax = false;
            if (isset($cholesterol['min'])) {
                $this->addUsingAlias(NutritionPeer::CHOLESTEROL, $cholesterol['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cholesterol['max'])) {
                $this->addUsingAlias(NutritionPeer::CHOLESTEROL, $cholesterol['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::CHOLESTEROL, $cholesterol, $comparison);
    }

    /**
     * Filter the query on the SaturatedFat column
     *
     * Example usage:
     * <code>
     * $query->filterBySaturatedfat(1234); // WHERE SaturatedFat = 1234
     * $query->filterBySaturatedfat(array(12, 34)); // WHERE SaturatedFat IN (12, 34)
     * $query->filterBySaturatedfat(array('min' => 12)); // WHERE SaturatedFat > 12
     * </code>
     *
     * @param     mixed $saturatedfat The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterBySaturatedfat($saturatedfat = null, $comparison = null)
    {
        if (is_array($saturatedfat)) {
            $useMinMax = false;
            if (isset($saturatedfat['min'])) {
                $this->addUsingAlias(NutritionPeer::SATURATEDFAT, $saturatedfat['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($saturatedfat['max'])) {
                $this->addUsingAlias(NutritionPeer::SATURATEDFAT, $saturatedfat['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::SATURATEDFAT, $saturatedfat, $comparison);
    }

    /**
     * Filter the query on the Protein column
     *
     * Example usage:
     * <code>
     * $query->filterByProtein(1234); // WHERE Protein = 1234
     * $query->filterByProtein(array(12, 34)); // WHERE Protein IN (12, 34)
     * $query->filterByProtein(array('min' => 12)); // WHERE Protein > 12
     * </code>
     *
     * @param     mixed $protein The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByProtein($protein = null, $comparison = null)
    {
        if (is_array($protein)) {
            $useMinMax = false;
            if (isset($protein['min'])) {
                $this->addUsingAlias(NutritionPeer::PROTEIN, $protein['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($protein['max'])) {
                $this->addUsingAlias(NutritionPeer::PROTEIN, $protein['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::PROTEIN, $protein, $comparison);
    }

    /**
     * Filter the query on the Carbohydrate column
     *
     * Example usage:
     * <code>
     * $query->filterByCarbohydrate(1234); // WHERE Carbohydrate = 1234
     * $query->filterByCarbohydrate(array(12, 34)); // WHERE Carbohydrate IN (12, 34)
     * $query->filterByCarbohydrate(array('min' => 12)); // WHERE Carbohydrate > 12
     * </code>
     *
     * @param     mixed $carbohydrate The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByCarbohydrate($carbohydrate = null, $comparison = null)
    {
        if (is_array($carbohydrate)) {
            $useMinMax = false;
            if (isset($carbohydrate['min'])) {
                $this->addUsingAlias(NutritionPeer::CARBOHYDRATE, $carbohydrate['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($carbohydrate['max'])) {
                $this->addUsingAlias(NutritionPeer::CARBOHYDRATE, $carbohydrate['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::CARBOHYDRATE, $carbohydrate, $comparison);
    }

    /**
     * Filter the query on the Fiber column
     *
     * Example usage:
     * <code>
     * $query->filterByFiber(1234); // WHERE Fiber = 1234
     * $query->filterByFiber(array(12, 34)); // WHERE Fiber IN (12, 34)
     * $query->filterByFiber(array('min' => 12)); // WHERE Fiber > 12
     * </code>
     *
     * @param     mixed $fiber The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByFiber($fiber = null, $comparison = null)
    {
        if (is_array($fiber)) {
            $useMinMax = false;
            if (isset($fiber['min'])) {
                $this->addUsingAlias(NutritionPeer::FIBER, $fiber['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fiber['max'])) {
                $this->addUsingAlias(NutritionPeer::FIBER, $fiber['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::FIBER, $fiber, $comparison);
    }

    /**
     * Filter the query on the Sodium column
     *
     * Example usage:
     * <code>
     * $query->filterBySodium(1234); // WHERE Sodium = 1234
     * $query->filterBySodium(array(12, 34)); // WHERE Sodium IN (12, 34)
     * $query->filterBySodium(array('min' => 12)); // WHERE Sodium > 12
     * </code>
     *
     * @param     mixed $sodium The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterBySodium($sodium = null, $comparison = null)
    {
        if (is_array($sodium)) {
            $useMinMax = false;
            if (isset($sodium['min'])) {
                $this->addUsingAlias(NutritionPeer::SODIUM, $sodium['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($sodium['max'])) {
                $this->addUsingAlias(NutritionPeer::SODIUM, $sodium['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::SODIUM, $sodium, $comparison);
    }

    /**
     * Filter the query on the Score column
     *
     * Example usage:
     * <code>
     * $query->filterByScore(1234); // WHERE Score = 1234
     * $query->filterByScore(array(12, 34)); // WHERE Score IN (12, 34)
     * $query->filterByScore(array('min' => 12)); // WHERE Score > 12
     * </code>
     *
     * @param     mixed $score The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByScore($score = null, $comparison = null)
    {
        if (is_array($score)) {
            $useMinMax = false;
            if (isset($score['min'])) {
                $this->addUsingAlias(NutritionPeer::SCORE, $score['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($score['max'])) {
                $this->addUsingAlias(NutritionPeer::SCORE, $score['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::SCORE, $score, $comparison);
    }

    /**
     * Filter the query on the Url column
     *
     * Example usage:
     * <code>
     * $query->filterByUrl('fooValue');   // WHERE Url = 'fooValue'
     * $query->filterByUrl('%fooValue%'); // WHERE Url LIKE '%fooValue%'
     * </code>
     *
     * @param     string $url The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByUrl($url = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($url)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $url)) {
                $url = str_replace('*', '%', $url);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(NutritionPeer::URL, $url, $comparison);
    }

    /**
     * Filter the query on the V column
     *
     * Example usage:
     * <code>
     * $query->filterByV(1234); // WHERE V = 1234
     * $query->filterByV(array(12, 34)); // WHERE V IN (12, 34)
     * $query->filterByV(array('min' => 12)); // WHERE V > 12
     * </code>
     *
     * @param     mixed $v The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByV($v = null, $comparison = null)
    {
        if (is_array($v)) {
            $useMinMax = false;
            if (isset($v['min'])) {
                $this->addUsingAlias(NutritionPeer::V, $v['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($v['max'])) {
                $this->addUsingAlias(NutritionPeer::V, $v['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::V, $v, $comparison);
    }

    /**
     * Filter the query on the VN column
     *
     * Example usage:
     * <code>
     * $query->filterByVn(1234); // WHERE VN = 1234
     * $query->filterByVn(array(12, 34)); // WHERE VN IN (12, 34)
     * $query->filterByVn(array('min' => 12)); // WHERE VN > 12
     * </code>
     *
     * @param     mixed $vn The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByVn($vn = null, $comparison = null)
    {
        if (is_array($vn)) {
            $useMinMax = false;
            if (isset($vn['min'])) {
                $this->addUsingAlias(NutritionPeer::VN, $vn['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($vn['max'])) {
                $this->addUsingAlias(NutritionPeer::VN, $vn['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::VN, $vn, $comparison);
    }

    /**
     * Filter the query on the GF column
     *
     * Example usage:
     * <code>
     * $query->filterByGf(1234); // WHERE GF = 1234
     * $query->filterByGf(array(12, 34)); // WHERE GF IN (12, 34)
     * $query->filterByGf(array('min' => 12)); // WHERE GF > 12
     * </code>
     *
     * @param     mixed $gf The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByGf($gf = null, $comparison = null)
    {
        if (is_array($gf)) {
            $useMinMax = false;
            if (isset($gf['min'])) {
                $this->addUsingAlias(NutritionPeer::GF, $gf['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($gf['max'])) {
                $this->addUsingAlias(NutritionPeer::GF, $gf['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::GF, $gf, $comparison);
    }

    /**
     * Filter the query on the L column
     *
     * Example usage:
     * <code>
     * $query->filterByL(1234); // WHERE L = 1234
     * $query->filterByL(array(12, 34)); // WHERE L IN (12, 34)
     * $query->filterByL(array('min' => 12)); // WHERE L > 12
     * </code>
     *
     * @param     mixed $l The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function filterByL($l = null, $comparison = null)
    {
        if (is_array($l)) {
            $useMinMax = false;
            if (isset($l['min'])) {
                $this->addUsingAlias(NutritionPeer::L, $l['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($l['max'])) {
                $this->addUsingAlias(NutritionPeer::L, $l['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(NutritionPeer::L, $l, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   Nutrition $nutrition Object to remove from the list of results
     *
     * @return NutritionQuery The current query, for fluid interface
     */
    public function prune($nutrition = null)
    {
        if ($nutrition) {
            $this->addUsingAlias(NutritionPeer::FOOD_ID, $nutrition->getFoodId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
